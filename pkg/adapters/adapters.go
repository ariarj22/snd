// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"database/sql"
	"fmt"
	"net/http"
	"strings"

	sqlEnt "entgo.io/ent/dialect/sql"
	"github.com/go-resty/resty/v2"
	"github.com/kubuskotak/asgard/driver"
	"github.com/rs/zerolog/log"

	"github.com/kubuskotak/king/pkg/persist/crud"
)

type client interface {
	*sqlEnt.Driver | *http.Client | *resty.Client
}

// Driver - interface adapter.
type Driver[T client] interface {
	Open() (T, error)
	Connect() error
	Disconnect() error
}

// Adapter components for external sources.
type Adapter struct {
	HelloSQLite *sqlEnt.Driver
	CrudPersist *crud.Database
	CrudSQLite  *sqlEnt.Driver
}

// Option is Adapter type return func.
type Option func(adapter *Adapter)

// Sync - configure all adapters.
func (a *Adapter) Sync(opts ...Option) {
	for o := range opts {
		opt := opts[o]
		opt(a)
	}
}

// UnSync - release all adapter connection.
func (a *Adapter) UnSync() error {
	var errs []string
	if a.CrudSQLite != nil {
		log.Info().Msg("CrudSQLite is closed")
		if err := a.CrudSQLite.Close(); err != nil {
			errs = append(errs, err.Error())
		}
	}
	if a.HelloSQLite != nil {
		log.Info().Msg("HelloSQLite is closed")
		if err := a.HelloSQLite.Close(); err != nil {
			errs = append(errs, err.Error())
		}
	}
	if len(errs) > 0 {
		err := fmt.Errorf(strings.Join(errs, "\n"))
		log.Error().Err(err).Msg("UnSync adapter error")
		return err
	}
	return nil
}

func init() {
	sql.Register("sqlite3", driver.Sqlite())
}
